Id,PostId,Score,Text,CreationDate,UserDisplayName,UserId,ContentLicense
"11814902","521298","288","`System.Drawing.Rectangle` violates all three of these rules.","2009-02-06 17:52:39","","49942","CC BY-SA 2.5"
"1581423","1705008","243","It's only globally unique, so it's only unique on our planet. If you want a truly unique id you need to use a **universally** unique id (UUID). I assume that you're only interested in uniqueness within our universe. :-)","2009-11-10 01:40:37","","12950","CC BY-SA 2.5"
"10521171","294138","223","Unrelated, but for anyone looking to merge just two dictionaries without duplicate key checks, this works nicely: `dicA.Concat(dicB).ToDictionary(kvp => kvp.Key, kvp => kvp.Value)`","2011-12-14 07:31:42","","11410","CC BY-SA 3.0"
"6470498","4994277","219","""Because I want to know how it works"" is a good enough reason.","2011-04-14 20:50:56","","23886","CC BY-SA 3.0"
"80131664","38138100","201","@tmg The docs say 'Transient lifetime services are created each time they are requested.' and 'Scoped lifetime services are created once per request.' which unless my grasp of English is weaker than I thought actually mean the exact same thing.","2017-10-05 15:20:01","","954927","CC BY-SA 3.0"
"23899277","16621738","194","Maybe `\d` deals with locales. E.g. Hebrew uses letters for digits.","2013-05-18 07:20:44","","1491895","CC BY-SA 3.0"
"1596566","1718037","192","I just asked Anders (and the rest of the design team) what they thought. Let's just say the results would not be printable in a family-friendly newspaper.","2009-11-11 22:37:45","","88656","CC BY-SA 2.5"
"7043687","9","184","what all of the answers so far have missed is that it depends where the person was born and where they are right now.","2011-05-21 07:34:10","","184025","CC BY-SA 3.0"
"18507233","13516689","177","How many variations of this question are going to be asked?","2012-11-22 19:41:47","","828584","CC BY-SA 3.0"
"48213123","249760","167","The upcoming **.NET 4.6** (to be release later in this year) introduces support for this. See [`DateTimeOffset.FromUnixTimeSeconds`](https://msdn.microsoft.com/en-us/library/system.datetimeoffset.fromunixtimeseconds.aspx) and [`DateTimeOffset.ToUnixTimeSeconds`](https://msdn.microsoft.com/en-us/library/system.datetimeoffset.tounixtimeseconds.aspx) methods. There are methods for millisecond unix-time as well.","2015-05-05 09:29:29","","1336654","CC BY-SA 3.0"