Id,PostId,Score,Text,CreationDate,UserDisplayName,UserId,ContentLicense
"6433179","5642481","20","you can build anything with assembly too","2011-04-12 22:50:07","","505088","CC BY-SA 3.0"
"5953476","5282782","18","I think he says that in order to keep the C# team and management happy (something about strategy). Its kind of like talking about Scala at a Java conference.","2011-03-12 13:40:39","","402547","CC BY-SA 2.5"
"4352268","4034802","18","@Jon Harrop  That's the point of the question. Haskell solves dozens of problems with Type Classes, and I wanted to know what the F# alternatives were to solving a similar *class* of problems.   Also the Arrow port isn't to solve any problems, its just a ""I thought it would be fun to learn more about Arrows"" activity.","2010-10-29 14:37:46","","93221","CC BY-SA 2.5"
"6434182","5642481","15","F# came out of Microsoft Research, Don Syme was the lead.  MR is a bit annoying, they keep creating projects that turn into actually usable products.  We'll have @ohm whip them to behave like real scientists.","2011-04-13 00:56:54","","17034","CC BY-SA 3.0"
"7195479","6186230","15","+1 for greek characters in your code :)","2011-05-31 10:46:32","","11410","CC BY-SA 3.0"
"6232064","5492930","15","GHC has Microsoft behind it as well:  most of the principals work for Microsoft Research Cambridge and working on GHC is their job.","2011-03-30 22:00:19","","643977","CC BY-SA 2.5"
"18027644","13233814","15","C#, Ruby and JavaScript are NOT functional languages. They are languages that support _some_ functional abstractions, but have little language support for functional programming.","2012-11-05 14:17:09","","938694","CC BY-SA 3.0"
"3939002","3713233","15","@Jon: I gave a correct answer to your incorrect claim that type annotations in Haskell are ubiquitous due to the ubiquity of type classes. Even in the absence of a need for an explicit type signature, one may serve (among other things) to document code, to enforce usage, and to improve the locality of error messages.","2010-09-16 19:04:32","","371753","CC BY-SA 2.5"
"3860443","3664258","14","@Jon Harrop: Can you give a concrete example of when you ""need"" any language feature? In the end, once you have Turing-equivalence, everything else is just syntax and convenience. Type classes are the most expressive approach to ad-hoc polymorphism I'm familiar with. Do you think subtype polymorphism and member overloading are useful?","2010-09-08 13:47:19","","157360","CC BY-SA 2.5"
"11014478","8823682","14","IMHO mutability by default, inheritance and lack of structural equality make classes more dangerous than records, but you don't see many people complaining about that ;-)","2012-01-11 17:35:54","","21239","CC BY-SA 3.0"